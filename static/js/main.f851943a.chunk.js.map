{"version":3,"sources":["Currency/Currency.js","actions/actions.js","reducers/actionTypes.js","store/mapStateToProps.js","TransactionList/TransactionList.js","HighestTransaction/HighestTransaction.js","Transactions/Transactions.js","App/App.js","store/initialState.js","reducers/reducers.js","store/store.js","index.js"],"names":["Currency","props","pattern","changeCurrency","bind","e","filledCurrency","target","value","this","test","_currencyErrorMsg","classList","contains","remove","add","className","htmlFor","id","type","onChange","ref","el","Component","ConnectedCurrency","connect","dispatch","currency","changeCurrencyAction","mapStateToProps","state","transactions","TransactionList","list","sum","Object","values","reduce","total","Number","length","toFixed","map","nr","key","name","onClick","clickHandler","HighestTransaction","data","sortedTable","JSON","parse","stringify","sort","a","b","Transactions","idCounter","namePattern","valuePattern","addTransaction","removeTransaction","preventDefault","filledName","_nameInput","filledValue","_valueInput","validName","validValue","_transactionErrorMsg","transaction","_submit","setAttribute","setTimeout","removeAttribute","currentTarget","parentNode","onSubmit","ConnectedTransactions","addTransactionAction","removeTransactionAction","getTransactions","App","initialState","financialApp","action","assign","concat","filter","store","createStore","subscribe","console","log","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f851943a.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {changeCurrencyAction} from '../actions/actions';\r\n\r\nclass Currency extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.pattern = /^(\\d+)(\\.\\d+)?$/;        // Pattern to test input-currency value\r\n        this.changeCurrency = this.changeCurrency.bind(this);\r\n    }\r\n\r\n    changeCurrency(e) {\r\n        const filledCurrency = e.target.value;\r\n        const valid = this.pattern.test(filledCurrency);\r\n\r\n        if (valid) {\r\n            if (this._currencyErrorMsg.classList.contains('currency__info--show')) {\r\n                this._currencyErrorMsg.classList.remove('currency__info--show');\r\n            }\r\n            this.props.changeCurrency(filledCurrency);\r\n        } else {\r\n            if (!this._currencyErrorMsg.classList.contains('currency__info--show')) {\r\n                this._currencyErrorMsg.classList.add('currency__info--show');\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <section className=\"currency\">\r\n                <p className=\"currency__title\">Wprowadź kurs waluty</p>\r\n                <label className=\"currency__label\" htmlFor=\"currency__label\">1 EUR = <input className=\"currency__input\" id=\"currency\" type=\"text\" onChange={this.changeCurrency} /> PLN</label>\r\n                <p className=\"currency__info\" ref={el => this._currencyErrorMsg = el}>\r\n                    Wartość kursu nie powinna zawierać innych znaków niż cyfry i jedna kropka (wraz z częścią ułamkową liczby)\r\n                </p>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps_Currency = dispatch => ({\r\n    changeCurrency: currency => dispatch(changeCurrencyAction(currency))\r\n});  \r\n\r\nconst ConnectedCurrency = connect(\r\n    null,\r\n    mapDispatchToProps_Currency\r\n)(Currency);\r\n\r\nexport default ConnectedCurrency;","import {CHANGE_CURRENCY, ADD_TRANSACTION, REMOVE_TRANSACTION, GET_TRANSACTIONS} from '../reducers/actionTypes';\r\n\r\nexport const changeCurrencyAction = currency => ({\r\n    type: CHANGE_CURRENCY,\r\n    currency\r\n});\r\n\r\nexport const addTransactionAction = transaction => ({\r\n    type: ADD_TRANSACTION,\r\n    transaction\r\n});\r\n\r\nexport const getTransactionsAction = () => ({\r\n    type: GET_TRANSACTIONS\r\n});\r\n\r\nexport const removeTransactionAction = id => ({\r\n    type: REMOVE_TRANSACTION,\r\n    id\r\n});  ","export const CHANGE_CURRENCY = 'CHANGE_CURRENCY';\r\nexport const ADD_TRANSACTION = 'ADD_TRANSACTION';\r\nexport const REMOVE_TRANSACTION = 'REMOVE_TRANSACTION';\r\nexport const GET_TRANSACTIONS = 'GET_TRANSACTIONS';","const mapStateToProps = state => ({\r\n    currency: state.currency,\r\n    transactions: state.transactions\r\n});\r\n\r\nexport default mapStateToProps;","import React from 'react';\r\n\r\nfunction TransactionList(props) {\r\n    const list = props.list;\r\n    const currency = props.currency;\r\n    const sum = Object.values(list).reduce((total, {value}) => total + Number(value), 0);       // Sum of transactions values\r\n\r\n    return(\r\n        <div className=\"transaction-list\">\r\n            <ul className=\"transaction-list__list\">\r\n                {<li className=\"transaction-list__summary\">\r\n                    <span className=\"transaction-list__summary-count\">\r\n                        Liczba transakcji:&nbsp;<span className=\"value\">{list.length}</span>\r\n                    </span>\r\n                    <span className=\"transaction-list__summary-sum\">\r\n                        SUMA:&nbsp;<span className=\"value\">{sum.toFixed(2)}</span>&nbsp;EUR (<span className=\"value\">{(sum * currency).toFixed(2)}</span> PLN)\r\n                    </span>\r\n                </li>}\r\n                {list.length !== 0 && list.map(function(el, nr) {\r\n                    return (\r\n                        <li key={nr} id={el.id} className=\"transaction-list__element\">\r\n                            <span className=\"transaction-list__element-container\">\r\n                                <span className=\"transaction-list__element-id\">{el.id}.</span>\r\n                                <span className=\"transaction-list__element-name value\">{el.name}</span>\r\n                                <span className=\"transaction-list__element-value\"><span className=\"value\">{Number(el.value).toFixed(2)}</span>&nbsp;EUR (<span className=\"value\">{Number(el.value * currency).toFixed(2)}</span>&nbsp;PLN)</span>\r\n                            </span>\r\n                            <span className=\"transaction-list__element-delete\" onClick={props.clickHandler}><i className=\"fa fa-times\"></i></span>\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n        </div>\r\n    );\r\n}  \r\n\r\nexport default TransactionList;","import React from 'react';\r\n\r\nfunction HighestTransaction(props) {\r\n    if (props.data.length !== 0) {\r\n        // Using JSON methods to avoid sorting transactions from store (props.data contains references to objects)\r\n        const sortedTable = JSON.parse(JSON.stringify(props.data)).sort(function(a, b) {\r\n            return Number(b.value) - Number(a.value);\r\n        });\r\n\r\n        return(\r\n            <div className=\"highest-transaction\">\r\n                <div className=\"highest-transaction__box\">\r\n                    <p className=\"highest-transaction__box-value\">Najwyższa wartość: \r\n                        <span className=\"highest-transaction__value\">\r\n                            <span className=\"value\">{sortedTable && Number(sortedTable[0].value).toFixed(2)}</span> EUR (<span className=\"value\">{sortedTable && (Number(sortedTable[0].value) * Number(props.currency)).toFixed(2)}</span> PLN)\r\n                        </span>\r\n                    </p>\r\n                    <p className=\"highest-transaction__box-name\">Transakcja: \r\n                        <span className=\"highest-transaction__name value\">{sortedTable && sortedTable[0].name}</span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return null;\r\n    }\r\n}  \r\n\r\nexport default HighestTransaction;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {addTransactionAction, removeTransactionAction, getTransactionsAction} from '../actions/actions';\r\nimport mapStateToProps from '../store/mapStateToProps';\r\nimport TransactionList from '../TransactionList/TransactionList';\r\nimport HighestTransaction from '../HighestTransaction/HighestTransaction';\r\n\r\nclass Transactions extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.idCounter = 0;\r\n        this.namePattern = /^.{3,}$/;       // Pattern to test input-transaction-name value\r\n        this.valuePattern = /^(\\d+)(\\.\\d+)?$/;       // Pattern to test input-transaction-value value\r\n        this.addTransaction = this.addTransaction.bind(this);\r\n        this.removeTransaction = this.removeTransaction.bind(this);\r\n    }\r\n\r\n    addTransaction(e) {\r\n        e.preventDefault();\r\n\r\n        const filledName = this._nameInput.value;\r\n        const filledValue = this._valueInput.value;\r\n        const validName = this.namePattern.test(filledName);\r\n        const validValue = this.valuePattern.test(filledValue);\r\n        const valid = validName && validValue;\r\n\r\n        if (valid) {\r\n            if (this._transactionErrorMsg.classList.contains('add-transaction__info--show')) {\r\n                this._transactionErrorMsg.classList.remove('add-transaction__info--show');\r\n            }\r\n\r\n            this.idCounter++;\r\n\r\n            const transaction = [{\r\n                id: this.idCounter,\r\n                name: this._nameInput.value,\r\n                value: this._valueInput.value\r\n            }];\r\n\r\n            this.props.addTransaction(transaction);\r\n\r\n            this._valueInput.value = '';\r\n            this._nameInput.value = '';\r\n        } else {\r\n            if (!this._transactionErrorMsg.classList.contains('add-transaction__info--show')) {\r\n                this._transactionErrorMsg.classList.add('add-transaction__info--show');\r\n            }\r\n\r\n            if (!this._submit.classList.contains('add-transaction__submit--error')) {\r\n                this._submit.classList.add('add-transaction__submit--error');\r\n                this._submit.setAttribute('disabled', true);        // Preventing from clicking submit before previous animation on button ends\r\n\r\n                setTimeout(function() {     // Unblocking possibility to click submit (animation on button is finished)\r\n                    this._submit.classList.remove('add-transaction__submit--error');\r\n                    this._submit.removeAttribute('disabled');\r\n                }.bind(this), 300);\r\n            }\r\n        }\r\n    }\r\n\r\n    removeTransaction(e) {\r\n        this.props.removeTransaction(Number(e.currentTarget.parentNode.id));\r\n    }\r\n\r\n    render() {\r\n        const transactions = this.props.transactions;\r\n        const currency = this.props.currency;\r\n\r\n        return(\r\n            <section className=\"transactions-container\">\r\n                <div className=\"add-transaction\">\r\n                    <p className=\"add-transaction__title\">Dodaj transakcję</p>\r\n                    <form className=\"add-transaction__form\" onSubmit={this.addTransaction}>\r\n                        <label className=\"add-transaction__label\" htmlFor=\"transaction-name\">Nazwa: <input className=\"add-transaction__input add-transaction__input--name\" id=\"transaction-name\" type=\"text\" ref={el => this._nameInput = el} /></label>\r\n                        <label className=\"add-transaction__label\" htmlFor=\"transaction-value\">Wartość (EUR): <input className=\"add-transaction__input add-transaction__input--value\" id=\"transaction-value\" type=\"text\" ref={el => this._valueInput = el} /></label>\r\n                        <input className=\"add-transaction__submit\" type=\"submit\" value=\"Dodaj\" ref={el => this._submit = el} />\r\n                    </form>\r\n                    <p className=\"add-transaction__info\" ref={el => this._transactionErrorMsg = el}>Nazwa transakcji musi mieć przynajmniej 3 znaki, wartość (EUR) nie powinna zawierać innych znaków niż cyfry i jedna kropka (wraz z częścią ułamkową liczby)</p>\r\n                </div>\r\n                <TransactionList list={transactions} currency={currency} clickHandler={this.removeTransaction} />\r\n                <HighestTransaction data={transactions} currency={currency} />\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps_AddTransaction = dispatch => ({\r\n    addTransaction: transaction => dispatch(addTransactionAction(transaction)),\r\n    removeTransaction: id => dispatch(removeTransactionAction(id)),\r\n    getTransactions: () => dispatch(getTransactionsAction())\r\n});\r\n\r\nconst ConnectedTransactions = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps_AddTransaction\r\n)(Transactions); \r\n\r\nexport default ConnectedTransactions;","import React, {Component} from 'react';\r\nimport Currency from '../Currency/Currency';\r\nimport Transactions from '../Transactions/Transactions';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <h1 className=\"app-title\">financial-app</h1>\r\n                <Currency />\r\n                <Transactions />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// Initial state for reducer\r\nconst initialState = {\r\n    currency: 1,\r\n    transactions: []\r\n}\r\n\r\nexport default initialState;","import {CHANGE_CURRENCY, ADD_TRANSACTION, REMOVE_TRANSACTION, GET_TRANSACTIONS} from './actionTypes';\r\nimport initialState from '../store/initialState';\r\n\r\n// Main reducer\r\nconst financialApp = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case CHANGE_CURRENCY:\r\n            return Object.assign({}, state, {\r\n                currency: action.currency\r\n            });\r\n        case ADD_TRANSACTION:\r\n            return Object.assign({}, state, {\r\n                transactions: state.transactions.concat(action.transaction)\r\n            });\r\n        case REMOVE_TRANSACTION:\r\n            return Object.assign({}, state, {\r\n                transactions: state.transactions.filter(function(el) {\r\n                    return el.id !== action.id;\r\n                })\r\n            });\r\n        case GET_TRANSACTIONS:\r\n            return state.transactions;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default financialApp;","import {createStore} from 'redux';\r\nimport financialApp from '../reducers/reducers';\r\n\r\nconst store = createStore(financialApp);\r\n\r\nstore.subscribe(function() {\r\n    console.log(store.getState());\r\n});\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App/App';\r\nimport {Provider} from 'react-redux';\r\nimport store from './store/store';\r\nimport './index.scss';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}